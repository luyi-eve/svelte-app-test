{"version":3,"file":"0.DlP-3htX.js","sources":["../../../../../../src/routes/+layout.ts","../../../../../../node_modules/mode-watcher/dist/mode.js","../../../../../../node_modules/mode-watcher/dist/mode-watcher.svelte","../../../../../../src/routes/+layout.svelte"],"sourcesContent":["export const prerender = true;","import { get } from \"svelte/store\";\nimport { derivedMode, derivedTheme, disableTransitions, modeStorageKey, systemPrefersMode, themeColors, themeStorageKey, theme as themeStore, userPrefersMode, } from \"./stores.js\";\n/** Toggle between light and dark mode */\nexport function toggleMode() {\n    userPrefersMode.set(get(derivedMode) === \"dark\" ? \"light\" : \"dark\");\n}\n/** Set the mode to light or dark */\nexport function setMode(mode) {\n    userPrefersMode.set(mode);\n}\n/** Reset the mode to operating system preference */\nexport function resetMode() {\n    userPrefersMode.set(\"system\");\n}\n/** Set the theme to a custom value */\nexport function setTheme(theme) {\n    themeStore.set(theme);\n}\nexport function defineConfig(config) {\n    return config;\n}\n/** Used to set the mode on initial page load to prevent FOUC */\nexport function setInitialMode({ defaultMode, themeColors, darkClassNames = [\"dark\"], lightClassNames = [], defaultTheme = \"\", }) {\n    const rootEl = document.documentElement;\n    const mode = localStorage.getItem(\"mode-watcher-mode\") || defaultMode;\n    const theme = localStorage.getItem(\"mode-watcher-theme\") || defaultTheme;\n    const light = mode === \"light\" ||\n        (mode === \"system\" && window.matchMedia(\"(prefers-color-scheme: light)\").matches);\n    if (light) {\n        if (darkClassNames.length)\n            rootEl.classList.remove(...darkClassNames);\n        if (lightClassNames.length)\n            rootEl.classList.add(...lightClassNames);\n    }\n    else {\n        if (lightClassNames.length)\n            rootEl.classList.remove(...lightClassNames);\n        if (darkClassNames.length)\n            rootEl.classList.add(...darkClassNames);\n    }\n    rootEl.style.colorScheme = light ? \"light\" : \"dark\";\n    if (themeColors) {\n        const themeMetaEl = document.querySelector('meta[name=\"theme-color\"]');\n        if (themeMetaEl) {\n            themeMetaEl.setAttribute(\"content\", mode === \"light\" ? themeColors.light : themeColors.dark);\n        }\n    }\n    if (theme) {\n        rootEl.setAttribute(\"data-theme\", theme);\n        localStorage.setItem(\"mode-watcher-theme\", theme);\n    }\n    localStorage.setItem(\"mode-watcher-mode\", mode);\n}\nexport { modeStorageKey, themeStorageKey, derivedTheme as theme, userPrefersMode, systemPrefersMode, derivedMode as mode, themeColors, disableTransitions, };\n","<script>import { onMount } from \"svelte\";\nimport {\n  defineConfig,\n  disableTransitions as disableTransitionsStore,\n  mode,\n  setInitialMode,\n  setMode,\n  setTheme,\n  systemPrefersMode,\n  themeColors as themeColorsStore\n} from \"./mode.js\";\nimport {\n  darkClassNames as darkClassNamesStore,\n  isValidMode,\n  lightClassNames as lightClassNamesStore,\n  modeStorageKey as modeStorageKeyStore,\n  themeStorageKey as themeStorageKeyStore\n} from \"./stores.js\";\nexport let track = true;\nexport let defaultMode = \"system\";\nexport let themeColors = void 0;\nexport let disableTransitions = true;\nexport let darkClassNames = [\"dark\"];\nexport let lightClassNames = [];\nexport let defaultTheme = \"\";\nexport let nonce = \"\";\nexport let themeStorageKey = \"mode-watcher-theme\";\nexport let modeStorageKey = \"mode-watcher-mode\";\n$: disableTransitionsStore.set(disableTransitions);\n$: themeColorsStore.set(themeColors);\n$: darkClassNamesStore.set(darkClassNames);\n$: lightClassNamesStore.set(lightClassNames);\n$: modeStorageKeyStore.set(modeStorageKey);\n$: themeStorageKeyStore.set(themeStorageKey);\nonMount(() => {\n  const unsubscriber = mode.subscribe(() => {});\n\n  systemPrefersMode.tracking(track);\n  systemPrefersMode.query();\n\n  // ðŸš¨ Force Light Mode on Page Load\n  const localStorageMode = \"light\"; // Set mode to Light\n  setMode(localStorageMode); // Apply Light Mode\n  localStorage.setItem(getModeStorageKey(), \"light\"); // Save it to localStorage\n  document.documentElement.setAttribute(\"data-theme\", \"light\"); // Ensure Light Mode is applied\n\n  // ðŸš¨ Also force the theme to Light\n  setTheme(\"light\");\n  localStorage.setItem(getThemeStorageKey(), \"light\");\n\n  return () => {\n    unsubscriber();\n  };\n});\n\nconst initConfig = defineConfig({\n  defaultMode,\n  themeColors,\n  darkClassNames,\n  lightClassNames,\n  defaultTheme,\n  modeStorageKey,\n  themeStorageKey\n});\n$: trueNonce = typeof window === \"undefined\" ? nonce : \"\";\n</script>\n\n<svelte:head>\n\t{#if themeColors}\n\t\t<!-- default to dark mode for to allow testing -->\n\t\t<!-- this will be overwritten by FOUC prevention snippet below -->\n\t\t<!-- but that snippet does not run in vitest -->\n\t\t<meta name=\"theme-color\" content={themeColors.dark} />\n\t{/if}\n\n\t{#if trueNonce}\n\t\t<!-- eslint-disable-next-line svelte/no-at-html-tags prefer-template -->\n\t\t{@html `<script nonce=${trueNonce}>(` +\n\t\t\tsetInitialMode.toString() +\n\t\t\t`)(` +\n\t\t\tJSON.stringify(initConfig) +\n\t\t\t`);</script>`}\n\t{:else}\n\t\t<!-- eslint-disable-next-line svelte/no-at-html-tags prefer-template -->\n\t\t{@html `<script>(` +\n\t\t\tsetInitialMode.toString() +\n\t\t\t`)(` +\n\t\t\tJSON.stringify(initConfig) +\n\t\t\t`);</script>`}\n\t{/if}\n</svelte:head>\n","<script>\n\texport const prerender = true;\n\n\timport Navbar from '$lib/components/portfolio/Navbar.svelte';\n\timport '../app.css';\n\timport { ModeWatcher, setMode } from 'mode-watcher';\n\tsetMode('light');\n\n</script>\n\n\t<ModeWatcher />\n\t<div class=\"relative mx-auto min-h-screen max-w-2xl bg-background px-6 py-12 font-sans antialiased sm:py-24\">\n\t\t<slot></slot>\n\t\t<Navbar />\n\t</div>\n"],"names":["theme","themeStore","themeColors","darkClassNames","lightClassNames","ctx","disableTransitions","themeStorageKey","modeStorageKey","mode","disableTransitionsStore","themeColorsStore","darkClassNamesStore","lightClassNamesStore","modeStorageKeyStore","themeStorageKeyStore","prerender"],"mappings":"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","x_google_ignoreList":[1,2]}